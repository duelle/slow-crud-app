// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.jclarity.had_one_dismissal.domain;

import com.jclarity.had_one_dismissal.domain.Company;
import com.jclarity.had_one_dismissal.domain.JobListing;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect JobListing_Roo_Finder {
    
    public static TypedQuery<JobListing> JobListing.findJobListingsByCompany(Company company) {
        if (company == null) throw new IllegalArgumentException("The company argument is required");
        EntityManager em = JobListing.entityManager();
        TypedQuery<JobListing> q = em.createQuery("SELECT o FROM JobListing AS o WHERE o.company = :company", JobListing.class);
        q.setParameter("company", company);
        return q;
    }
    
    public static TypedQuery<JobListing> JobListing.findJobListingsBySalaryLowerBound(int salaryLowerBound) {
        EntityManager em = JobListing.entityManager();
        TypedQuery<JobListing> q = em.createQuery("SELECT o FROM JobListing AS o WHERE o.salaryLowerBound = :salaryLowerBound", JobListing.class);
        q.setParameter("salaryLowerBound", salaryLowerBound);
        return q;
    }
    
    public static TypedQuery<JobListing> JobListing.findJobListingsBySalaryUpperBound(int salaryUpperBound) {
        EntityManager em = JobListing.entityManager();
        TypedQuery<JobListing> q = em.createQuery("SELECT o FROM JobListing AS o WHERE o.salaryUpperBound = :salaryUpperBound", JobListing.class);
        q.setParameter("salaryUpperBound", salaryUpperBound);
        return q;
    }
    
    public static TypedQuery<JobListing> JobListing.findJobListingsByTitleLike(String title) {
        if (title == null || title.length() == 0) throw new IllegalArgumentException("The title argument is required");
        title = title.replace('*', '%');
        if (title.charAt(0) != '%') {
            title = "%" + title;
        }
        if (title.charAt(title.length() - 1) != '%') {
            title = title + "%";
        }
        EntityManager em = JobListing.entityManager();
        TypedQuery<JobListing> q = em.createQuery("SELECT o FROM JobListing AS o WHERE LOWER(o.title) LIKE LOWER(:title)", JobListing.class);
        q.setParameter("title", title);
        return q;
    }
    
}
